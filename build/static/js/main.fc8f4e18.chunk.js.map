{"version":3,"sources":["logo.svg","api/searchAgent.js","components/login.js","components/smartInputBox.js","context/productContext.js","pages/home.js","pages/productDetails.js","pages/chat.js","components/enquiryForm.js","helpers/validationChecks.js","components/createProductForm.js","pages/queries.js","layout/toolbar.js","context/globatState.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","qs","require","baseUrl","requests","token","localStorage","getItem","call","method","url","body","Agent","set","send","stringify","then","res","console","log","rawCall","setToken","Login","props","handleInputChange","event","setState","authCreds","state","target","name","value","handleSubmit","endpoint","username","password","err","alert","msg","toggleRegister","setItem","loginCalled","ciliac_patient","this","openRegister","Card","style","width","color","Body","Title","Form","Group","controlId","Subtitle","className","textAlign","Control","type","placeholder","onChange","bind","marginBottom","Link","marginLeft","cursor","onClick","handelCilacToggle","float","backgroundColor","Button","variant","React","Component","smartInputBox","_scope","query","latestUpdatedOn","Date","getTime","setTimeout","wait","callingApiFunction","FormControl","marginTop","createContext","results","setResults","Home","productState","useContext","ProductContext","useState","redirect","id","wantsToSeeDetails","setWantsToSeeDetails","useEffect","hasOwnProperty","fetchProducts","handleVoting","key","handleViewDetails","columns","dataField","text","headerFormatter","cell","row","OverlayTrigger","trigger","placement","overlay","Popover","Content","class","formatter","upvotes","downvotes","as","_id","push","to","ProductData","bordered","keyField","data","pagination","paginationFactory","display","justifyContent","ProductDetails","productDetails","setProductDetails","match","params","JSON","EnquiryForm","show","setShow","company","description","user_email","setBody","handleClose","handleSave","input","test","handleMessageTyping","e","Modal","onHide","Header","closeButton","aria-label","aria-describedby","email","Footer","marginRight","CreateProductForm","glutonFree","Queries","details","Toolbar","GlobalContext","loggedout","setLoggedOut","Navbar","bg","expand","Toggle","aria-controls","Collapse","Nav","href","inline","window","clear","GlobalState","Provider","catch","children","App","path","component","Product","Boolean","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fc8f4e18.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import Agent from 'superagent';\r\nvar qs = require('qs')\r\n\r\n// const baseUrl = \"http://localhost:8060\"\r\nconst baseUrl = \"http://3.230.95.77:8060\"\r\n\r\n\r\nexport const requests = {\r\n    token: localStorage.getItem(\"userData\") || false,\r\n    call: (method, url, body) => {\r\n\r\n        return Agent[method](`${baseUrl}/${url}`)\r\n            .set('Authorization', requests.token)\r\n            .send(qs.stringify(body))\r\n            .then((res) => {\r\n                console.log(\"[from Agent]\", res.body);\r\n                return res.body\r\n            })\r\n    },\r\n    rawCall: (method, url, body) => {\r\n\r\n        return Agent[method](`${baseUrl}/${url}`)\r\n            .send(qs.stringify(body))\r\n            .then((res) => {\r\n                console.log(\"[from Agent]\", res.body);\r\n                return res.body\r\n            })\r\n    },\r\n    setToken() {\r\n        requests.token = localStorage.getItem(\"userData\")\r\n    }\r\n}\r\n\r\n// const baseUrl = \"http://localhost:8060\"\r\n\r\n// export default Test;","import React from 'react'\r\nimport { Card, Form, Button } from 'react-bootstrap';\r\nimport { requests } from '../api/searchAgent';\r\nimport {  \r\n    validateIfInputIsEmail\r\n} from \"../helpers/validationChecks\";\r\nexport default class Login extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            authCreds: {\r\n                username: \"\",\r\n                password: \"\",\r\n                name: \"\",\r\n                ciliac_patient: false\r\n            }\r\n        }\r\n    }\r\n\r\n    toggleRegister() {\r\n        this.setState({\r\n            openRegister: !this.state.openRegister\r\n        })\r\n    }\r\n    handleInputChange = event => {\r\n        this.setState({\r\n            authCreds: {\r\n                ...this.state.authCreds,\r\n                [event.target.name]: event.target.value\r\n            }\r\n        })\r\n    }\r\n    handleSubmit = (endpoint) => {\r\n        if (!this.state.authCreds.username) { alert(\"Please enter username!\"); return; }\r\n        if (!this.state.authCreds.password) { alert(\"Please enter password!\"); return; }\r\n        // if (validateIfInputIsEmail(this.state.authCreds.email)) {\r\n            requests.rawCall(\"post\", endpoint, this.state.authCreds)\r\n            .then((res) => {\r\n                if (!res.err && endpoint == \"login\") {\r\n                    localStorage.setItem(\"userData\", res.token)\r\n                    this.props.loginCalled()\r\n                } else if ((!res.err && endpoint == \"register\")) {\r\n                    alert(\"Yay,registered successfully! please login again.\")\r\n                    this.toggleRegister()\r\n                } else {\r\n                    alert(res.msg)\r\n                }\r\n            })\r\n        // }\r\n    }\r\n\r\n    handelCilacToggle() {\r\n        this.setState({\r\n            authCreds: {\r\n                ...this.state.authCreds,\r\n                ciliac_patient: !this.state.authCreds.ciliac_patient\r\n            }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.openRegister) {\r\n            return (\r\n                <Card style={{ width: '28rem', color: \"black\" }}>\r\n\r\n                    <Card.Body>\r\n                        <Card.Title>Register</Card.Title>\r\n                        <Form>\r\n                            <Form.Group controlId=\"formBasicEmail\">\r\n                                <Card.Subtitle className=\"mb-2\" style={{ textAlign: \"left\" }}>\r\n                                    Name\r\n                            </Card.Subtitle>\r\n                                <Form.Control type=\"text\" placeholder=\"Enter name\"\r\n                                    onChange={this.handleInputChange.bind(this)}\r\n                                    name=\"name\"\r\n                                />\r\n                            </Form.Group>\r\n                            <Form.Group controlId=\"formBasicEmail\">\r\n                                <Card.Subtitle className=\"mb-2\" style={{ textAlign: \"left\" }}>\r\n                                    Username\r\n                            </Card.Subtitle>\r\n                                <Form.Control type=\"text\" placeholder=\"Enter email\"\r\n                                    onChange={this.handleInputChange.bind(this)}\r\n                                    name=\"username\"\r\n                                />\r\n                            </Form.Group>\r\n\r\n                            <Form.Group controlId=\"formBasicPassword\">\r\n                                <Card.Subtitle className=\"mb-2\" style={{ textAlign: \"left\" }}>Password</Card.Subtitle>\r\n                                <Form.Control type=\"password\" placeholder=\"Password\"\r\n                                    onChange={this.handleInputChange.bind(this)}\r\n                                    name=\"password\"\r\n                                />\r\n                            </Form.Group>\r\n                            <div style={{ marginBottom: \"3%\" }}>\r\n\r\n                                <Card.Link style={{ marginLeft: \"2px\", cursor: \"pointer\" }} >Are you a ciliac patient?</Card.Link>\r\n\r\n                                <div className=\"toggle-button\">\r\n                                    <div onClick={() => this.handelCilacToggle()}\r\n                                        className=\"toggle-button-box\">\r\n                                        <div className=\"toggle-button-oval\" style={{\r\n                                            float: (this.state.authCreds.ciliac_patient) ? \"right\" : \"left\",\r\n                                            backgroundColor: (this.state.authCreds.ciliac_patient) ? \"#BEA57C\" : \"#BDBDBD\"\r\n                                        }}>\r\n                                        </div>\r\n                                    </div >\r\n                                </div>\r\n                            </div>\r\n                            <Button\r\n                                onClick={this.handleSubmit.bind(this, \"register\")}\r\n                                variant=\"primary\">\r\n                                Submit\r\n                            </Button>\r\n\r\n                            <Card.Link style={{ marginLeft: \"2px\", cursor: \"pointer\" }} onClick={this.toggleRegister.bind(this)}>Already have an account? Register</Card.Link>\r\n                        </Form>\r\n                    </Card.Body>\r\n                </Card>\r\n            )\r\n        } else return (\r\n            <Card style={{ width: '28rem', color: \"black\" }}>\r\n\r\n                <Card.Body>\r\n                    <Card.Title>Login</Card.Title>\r\n                    <Form>\r\n                        <Form.Group controlId=\"formBasicEmail\">\r\n                            <Card.Subtitle className=\"mb-2\" style={{ textAlign: \"left\" }}>\r\n                                Username\r\n                            </Card.Subtitle>\r\n                            <Form.Control type=\"text\" placeholder=\"Enter email\"\r\n                                onChange={this.handleInputChange.bind(this)}\r\n                                name=\"username\"\r\n                            />\r\n                        </Form.Group>\r\n                        <Form.Group controlId=\"formBasicPassword\">\r\n                            <Card.Subtitle className=\"mb-2\" style={{ textAlign: \"left\" }}>Password</Card.Subtitle>\r\n                            <Form.Control type=\"password\" placeholder=\"Password\"\r\n                                onChange={this.handleInputChange.bind(this)}\r\n                                name=\"password\"\r\n                            />\r\n                        </Form.Group>\r\n                        <Button\r\n                            onClick={this.handleSubmit.bind(this, \"login\")}\r\n                            variant=\"primary\">\r\n                            Submit\r\n                        </Button>\r\n                        <Card.Link style={{ marginLeft: \"2px\", cursor: \"pointer\" }} onClick={this.toggleRegister.bind(this)}>Don't have an account? Register</Card.Link>\r\n                    </Form>\r\n                </Card.Body>\r\n            </Card>\r\n        )\r\n    }\r\n}","import React from 'react'\r\n// import { timeout } from 'q';\r\nimport {  FormControl } from 'react-bootstrap';\r\n\r\n\r\nexport default class smartInputBox extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n\r\n    handleInputChange(event) {\r\n        var _scope = this;\r\n        var query = event.target.value;\r\n\r\n        this.setState({\r\n            latestUpdatedOn: new Date().getTime()\r\n        })\r\n        setTimeout(function () {\r\n            if (_scope.props.wait && new Date().getTime() - _scope.state.latestUpdatedOn >= 900) {\r\n                _scope.props.callingApiFunction(query)\r\n            }\r\n        }, 900)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <FormControl type=\"text\" style={{ marginTop : \"4px\"}}  onChange={this.handleInputChange.bind(this)} placeholder=\"Search products...\" className=\"mr-sm-2\" />\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\n\r\nexport default React.createContext({\r\n    results: false,\r\n    // username: false,\r\n    setResults: () => { },\r\n    // setUsername: () => { },\r\n});","import React, { useContext, useEffect, useState } from 'react'\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport '../styles/home.css';\r\nimport Login from '../components/login';\r\nimport { requests,testing }  from '../api/searchAgent'\r\nimport SearchBox from '../components/smartInputBox';\r\nimport { Table, Button, Modal, FormControl, OverlayTrigger, Popover } from 'react-bootstrap';\r\n// import { observer } from 'mobx-react';\r\nimport ProductContext, { ProductConsumer } from '../context/productContext'\r\n\r\nimport Icon from '@material-ui/core/Icon';\r\nimport {Redirect} from 'react-router-dom';\r\nimport { fcall } from 'q';\r\nimport paginationFactory from 'react-bootstrap-table2-paginator';\r\nvar ProductData;\r\n\r\n// @observer\r\nconst Home = props => {\r\n    const productState = useContext(ProductContext);\r\n    const [wantsToSeeDetails, setWantsToSeeDetails] = useState({redirect : false,id : false});\r\n\r\n\r\n    useEffect(() => {\r\n        console.log(\"rendered this\", productState.results)\r\n        if (localStorage.hasOwnProperty(\"userData\")) {\r\n            productState.fetchProducts()\r\n        }\r\n        // testing();\r\n\r\n    }, [])\r\n\r\n\r\n    const handleVoting = (id, key) => {\r\n        requests.call(\"post\", `vote/${id}?type=${key}`)\r\n            .then((res) => {\r\n                console.log(res);\r\n                productState.fetchProducts()\r\n            })\r\n    }\r\n\r\n\r\n    const loginCalled = () => {\r\n        console.log(\"rendered this\")\r\n        requests.setToken()\r\n        productState.fetchProducts();\r\n    }\r\n    const handleSearchInput = (query) => {\r\n        productState.fetchProducts(query)\r\n    }\r\n    const handleViewDetails = (id) => {\r\n        console.log(\"setting\", id)\r\n        setWantsToSeeDetails({\r\n            ...wantsToSeeDetails,\r\n            redirect : true,\r\n            id : id\r\n        })\r\n    }\r\n    const voteFormatter = (cell, row) => {\r\n        return (\r\n            <div>\r\n                <OverlayTrigger\r\n                    trigger=\"hover\"\r\n                    placement={\"top\"}\r\n                    overlay={\r\n                        <Popover id={`popover-positioned-${\"top\"}`}>\r\n                            <Popover.Title as=\"h3\">Gluten Free</Popover.Title>\r\n                            <Popover.Content>\r\n                                Vote this product as {` `}<strong>Gluten Free</strong>\r\n                            </Popover.Content>\r\n                        </Popover>\r\n                    }\r\n                >\r\n                    <i class=\"material-icons-outlined green\"  onClick={handleVoting.bind(this, row._id, \"up\")} >thumb_up</i>\r\n                </OverlayTrigger>\r\n                {` `} {` `}\r\n                <OverlayTrigger\r\n                    trigger=\"hover\"\r\n                    placement={\"top\"}\r\n                    overlay={\r\n                        <Popover id={`popover-positioned-${\"top\"}`}>\r\n                            <Popover.Title as=\"h3\">Contains Gluten</Popover.Title>\r\n                            <Popover.Content>\r\n                                Vote this product as {` `}<strong>Contains Gluton</strong>\r\n\r\n                            </Popover.Content>\r\n                        </Popover>\r\n                    }\r\n                >\r\n                    <i class=\"material-icons-outlined red\" onClick={handleVoting.bind(this, row._id, \"down\")}>thumb_down</i>\r\n                </OverlayTrigger>\r\n\r\n\r\n            </div>\r\n        )\r\n    }\r\n    const detailsBTNFormatter = (cell, row) => {\r\n        return (\r\n            <i onClick={handleViewDetails.bind(this,row._id)} class=\"material-icons-outlined\">explore</i>\r\n        )\r\n    }\r\n    const informationFormatterVotes = (cell, row) => {\r\n        return (\r\n            <div>Upvotes\r\n            <OverlayTrigger\r\n                    trigger=\"hover\"\r\n                    placement={\"top\"}\r\n                    overlay={\r\n                        <Popover id={`popover-positioned-${\"top\"}`}>\r\n                            {/* <Popover.Title as=\"h3\">The votes a product received as gluten free</Popover.Title> */}\r\n                            <Popover.Content>\r\n                                Votes received on this product as {` `}<strong>Gluten Free</strong>\r\n\r\n                            </Popover.Content>\r\n                        </Popover>\r\n                    }\r\n                >\r\n                    <i class=\"material-icons-outlined md-10\">info</i>\r\n                </OverlayTrigger>\r\n\r\n                {` `} /{` `}\r\n\r\n                Downvotes\r\n            <OverlayTrigger\r\n                    trigger=\"hover\"\r\n                    placement={\"top\"}\r\n                    overlay={\r\n                        <Popover id={`popover-positioned-${\"top\"}`}>\r\n                            {/* <Popover.Title as=\"h3\">The votes a product received as it contains gluten</Popover.Title> */}\r\n                            <Popover.Content>\r\n                                Vote received this product as {` `}<strong>Contains Gluton</strong>\r\n\r\n                            </Popover.Content>\r\n                        </Popover>\r\n                    }\r\n                >\r\n                    <icon class=\"material-icons-outlined md-10\">info</icon>\r\n                </OverlayTrigger>\r\n            </div>\r\n        )\r\n    }\r\n    const votesFormatter = (cell, row) => {\r\n        return (\r\n            <div>\r\n                <span  className=\"green\">{row.upvotes}</span> {` / `} <span  className=\"red\">{row.downvotes}</span>\r\n            </div>\r\n        )\r\n    }\r\n    const columns = [\r\n        {\r\n            dataField: '_id',\r\n            text: '#'\r\n        },\r\n        {\r\n            dataField: 'name',\r\n            text: 'Product Name'\r\n        },\r\n        {\r\n            dataField: 'company',\r\n            text: 'Company Name',\r\n        },\r\n        {\r\n            dataField: 'upvotes',\r\n            text: 'Upvotes / Downvotes',\r\n            headerFormatter: informationFormatterVotes,\r\n            formatter: votesFormatter,\r\n\r\n        },\r\n        {\r\n            dataField: '',\r\n            text: 'Drop your vote',\r\n            formatter: voteFormatter,\r\n\r\n        },\r\n        {\r\n            dataField: 'source_of_info',\r\n            text: 'Source of information',\r\n            // formatter: voteFormatter,\r\n\r\n        },\r\n        {\r\n            dataField: '',\r\n            text: 'View Details',\r\n            formatter: detailsBTNFormatter,\r\n\r\n        },\r\n    ]\r\n\r\n    let content;\r\n    if(wantsToSeeDetails.redirect){\r\n        return (\r\n            <Redirect push to={`/product/${wantsToSeeDetails.id}`}></Redirect>\r\n        )\r\n    }\r\n    console.log(\"[results]\", ProductData)\r\n    if (localStorage.hasOwnProperty(\"userData\")) {\r\n        content = (\r\n            <div className=\"table-container-center\">\r\n\r\n                {/* <div className=\"general-heading\">Look for a product to know what people think about its gluten content !</div> */}\r\n                {!!productState.results && <BootstrapTable bordered={false} keyField='id' data={productState.results} columns={columns} pagination={ paginationFactory() }/>}\r\n\r\n\r\n\r\n                {/* {results && JSON.stringify(results)} */}\r\n\r\n\r\n                <div style={{ display: \"flex\", justifyContent: \"space-around\" }}>\r\n                  \r\n                </div>\r\n\r\n            </div>\r\n            // </ProductConsumer>\r\n\r\n        )\r\n    } else {\r\n        content = (\r\n            <Login loginCalled={loginCalled.bind(this)} />\r\n        )\r\n    }\r\n    return content\r\n}\r\n\r\n\r\nexport default Home;","import React, { useContext, useEffect, useState } from 'react';\r\nimport {requests} from '../api/searchAgent'\r\n\r\nconst ProductDetails = props => {\r\n    const [productDetails,setProductDetails] = useState(false);\r\n    useEffect(()=>{\r\n        requests.call(\"get\",`product/${props.match.params.id}`)\r\n        .then((res)=>{\r\n            console.log(res);\r\n            setProductDetails(res.data)\r\n        })\r\n    },[])\r\n   \r\n   let content = <div>{props.match.params.id}{JSON.stringify(productDetails)}</div>\r\n\r\n    return content;\r\n\r\n}\r\n\r\nexport default ProductDetails","import React from 'react'\r\nimport '../styles/chat.css';\r\nimport { requests } from '../api/searchAgent'\r\nimport SearchBox from '../components/smartInputBox';\r\nimport { InputGroup, FormControl, Button } from 'react-bootstrap';\r\nimport { observer } from 'mobx-react';\r\nimport openSocket from 'socket.io-client';\r\nimport Agent from 'superagent'\r\n// var socket = openSocket('http://localhost:8060');\r\n\r\n// const baseUrl = \"https://3c100fe1.ngrok.io\"\r\nconst baseUrl = \"http://localhost:8060\"\r\n\r\n\r\n\r\n\r\n\r\nexport default class Home extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            list: [{ text: \"something\" }, { text: \"test\" }],\r\n            fromId: 1,\r\n            toId: 2,\r\n            message: \"\",\r\n\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.socket = openSocket(`${window.location.origin.replace(\"3000\",\"8060\")}`);\r\n\r\n        this.socket.on('chat', (data) => {\r\n            this.setState({\r\n                list : this.state.list.concat({text : data})\r\n            })\r\n        });\r\n        // this.socket.emit('chat', this.state.message);\r\n\r\n        // var socket = io();\r\n    }\r\n\r\n    onSend() {\r\n        console.log(\"message\", this.state.message)\r\n        this.socket.emit('chat', this.state.message);\r\n        this.setState({\r\n            message : \"\"\r\n        })\r\n        // Agent.post(`${baseUrl}/${url}`)\r\n        // .send({message : this.state.message})\r\n        // .then((res) => {\r\n        //     console.log(\"[from Agent]\", res.body);\r\n        //     return res.body\r\n        // })\r\n    }\r\n    handleMessageTyping(message) {\r\n        console.log(\"message\", message)\r\n        this.setState({ message: message })\r\n    }\r\n\r\n    render() {\r\n        const url = `chat?from=${this.state.fromId}&to=${this.state.toId}`\r\n        return (\r\n            <div className=\"chatbox-container\">\r\n                <div className=\"chat-displayer\">\r\n                    {this.state.list && this.state.list.map((el, idx) => {\r\n                        return <div className=\"message-displayer\"><div className=\"text-container\">{el.text}</div></div>\r\n                    })}\r\n                    {/* <div className=\"message-displayer\"><div className=\"text-container\">{this.state.message}</div></div> */}\r\n                </div>\r\n\r\n                <div className=\"mb-3\">\r\n                    {/* <InputGroup.Prepend> */}\r\n                    {/* <input type=\"text\" onChange={(e) => this.handleMessageTyping(e.target.value)}\r\n                    value={this.state.message}                    id=\"inputGroup-sizing-default\"></input> */}\r\n                    {/* </InputGroup.Prepend> */}\r\n                    <FormControl\r\n                     onChange={(e) => this.handleMessageTyping(e.target.value)}\r\n                        aria-label=\"Default\"\r\n                        value={this.state.message} \r\n                        aria-describedby=\"inputGroup-sizing-default\"\r\n                    />\r\n                    <Button onClick={() => this.onSend()} variant=\"info\">Send</Button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n}","import React, { useContext, useEffect, useState } from 'react'\r\nimport ProductContext, { ProductConsumer } from '../context/productContext'\r\nimport { Table, Button, Modal, FormControl } from 'react-bootstrap';\r\nimport { requests } from '../api/searchAgent'\r\nimport {\r\n    validateIfInputIsEmail\r\n} from \"../helpers/validationChecks\";\r\n\r\nconst EnquiryForm = props => {\r\n    const productState = useContext(ProductContext);\r\n    const [show, setShow] = useState(false);\r\n    const [body, setBody] = useState({\r\n        name: \"\",\r\n        company: \"\",\r\n        description: \"\",\r\n        user_email: \"\",\r\n\r\n    });\r\n\r\n\r\n    const openModal = () => {\r\n        setShow(true)\r\n    }\r\n    const handleClose = () => {\r\n        setShow(false)\r\n    }\r\n    const handleSave = () => {\r\n\r\n        if (validateIfInputIsEmail(body.user_email)) {\r\n            if (!!body.name && body.company && body.description) {\r\n                requests.call(\"post\", \"enquire\", body)\r\n                    .then((res) => {\r\n                        console.log(res)\r\n                        productState.fetchProducts()\r\n                        handleClose();\r\n                        alert(\"Thank you for reaching us, we have posted your query. You can track it in the queries list. We will contact you on your given email if it is resolved.\" )\r\n                    })\r\n            } else { alert(\"Please fill in all the fields\") }\r\n        }\r\n    }\r\n\r\n\r\n    const handleMessageTyping = (e) => {\r\n\r\n        setBody({\r\n            ...body,\r\n            [e.target.name]: e.target.value\r\n\r\n        })\r\n    }\r\n    return (\r\n        <div>\r\n            <Modal show={show} onHide={() => handleClose()}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Have doubts about a product? We will post your query!</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    Name\r\n        <FormControl\r\n                        onChange={(e) => handleMessageTyping(e)}\r\n                        aria-label=\"Default\"\r\n                        name=\"name\"\r\n                        value={body.name}\r\n                        aria-describedby=\"inputGroup-sizing-default\"\r\n                    />\r\n                    Company\r\n        <FormControl\r\n                        onChange={(e) => handleMessageTyping(e)}\r\n                        aria-label=\"Default\"\r\n                        name=\"company\"\r\n                        value={body.company}\r\n                        aria-describedby=\"inputGroup-sizing-default\"\r\n                    />\r\n                    Description\r\n        <FormControl\r\n                        onChange={(e) => handleMessageTyping(e)}\r\n                        aria-label=\"Default\"\r\n                        name=\"description\"\r\n                        value={body.description}\r\n                        aria-describedby=\"inputGroup-sizing-default\"\r\n                    />\r\n                    Email\r\n        <FormControl\r\n                        onChange={(e) => handleMessageTyping(e)}\r\n                        aria-label=\"Default\"\r\n                        name=\"user_email\"\r\n                        value={body.email}\r\n                        aria-describedby=\"inputGroup-sizing-default\"\r\n                    />\r\n\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={() => handleClose()}>\r\n                        Close\r\n             </Button>\r\n                    <Button variant=\"primary\" onClick={() => handleSave()}>\r\n                        Save Changes\r\n            </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n\r\n            <Button  style={{marginRight : \"8px\",marginLeft : \"8px\", marginTop : \"4px\",marginBottom : \"4px\"}}  onClick={() => openModal()}>Enquire</Button>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default EnquiryForm","export function validateIfInputIsEmail(input) {\r\n    let re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n    if (!re.test(input)) {\r\n        alert(\"Email is not valid.\");\r\n        return false;\r\n    }\r\n    return true;\r\n}","import React,{useContext,useEffect,useState} from 'react'\r\nimport ProductContext , {ProductConsumer} from '../context/productContext'\r\nimport { Table, Button, Modal, FormControl } from 'react-bootstrap';\r\nimport { requests } from '../api/searchAgent'\r\nimport {  \r\n    validateIfInputIsEmail\r\n} from \"../helpers/validationChecks\";\r\n\r\nconst CreateProductForm =props=> {\r\n    const productState = useContext(ProductContext);\r\n    const [show , setShow] = useState(false);\r\n    const [body , setBody] = useState({\r\n        name : \"\",\r\n        company : \"\",\r\n        glutonFree : false,\r\n    });\r\n\r\n    const  openModal=()=> {\r\n        setShow(true)\r\n     }\r\n   const  handleClose =()=> {\r\n       setShow(false)\r\n     }\r\n   const  handleSave=()=> {\r\n    if(!!body.name && !!body.company ){\r\n\r\n        requests.call(\"post\",\"create/product\",body)\r\n        .then((res)=>{\r\n            console.log(res)    \r\n            productState.fetchProducts()\r\n            handleClose()        \r\n        })\r\n    }else{alert(\"Please fill in the required fields !\")}\r\n         \r\n     }\r\n \r\n    const handleCheckBoxClick = ()=>{\r\n        setBody({\r\n            ...body,\r\n            glutonFree : !body.glutonFree\r\n        })\r\n     }\r\n   const  handleMessageTyping=(e)=>{\r\n \r\n     setBody({\r\n         ...body , \r\n             [e.target.name] : e.target.value\r\n         \r\n     })\r\n     }\r\n    return(\r\n        <div>\r\n        <Modal show={show} onHide={() => handleClose()}>\r\n        <Modal.Header closeButton>\r\n            <Modal.Title>Inform us about a product</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n        Name\r\n        <FormControl\r\n         onChange={(e) => handleMessageTyping(e)}\r\n            aria-label=\"Default\"\r\n            name=\"name\"\r\n            value={body.name} \r\n            aria-describedby=\"inputGroup-sizing-default\"\r\n        />\r\n        Company\r\n        <FormControl\r\n         onChange={(e) => handleMessageTyping(e)}\r\n            aria-label=\"Default\"\r\n            name=\"company\"\r\n            value={body.company} \r\n            aria-describedby=\"inputGroup-sizing-default\"\r\n        />\r\n    <input type=\"checkbox\"\r\n    onChange={()=>handleCheckBoxClick()}\r\n    value={body.glutonFree} \r\n\r\n    className=\"ciliac-checkbox\" style={{marginTop : \"5px\"}}></input>Gluten Free\r\n    \r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n            <Button variant=\"secondary\" onClick={() => handleClose()}>\r\n                Close\r\n             </Button>\r\n            <Button variant=\"primary\" onClick={() => handleSave()}>\r\n                Save Changes\r\n            </Button>\r\n        </Modal.Footer>\r\n    </Modal>\r\n \r\n    <Button style={{marginRight : \"8px\", marginTop : \"4px\",marginBottom : \"4px\"}} onClick={() => openModal()}>Create</Button>\r\n   </div>\r\n    )\r\n\r\n}\r\n\r\nexport default CreateProductForm","import React, { useContext, useEffect, useState } from 'react'\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport '../styles/home.css';\r\nimport Login from '../components/login';\r\nimport { requests, testing } from '../api/searchAgent'\r\nimport SearchBox from '../components/smartInputBox';\r\nimport { Table, Button, Modal, FormControl, OverlayTrigger, Popover } from 'react-bootstrap';\r\n// import { observer } from 'mobx-react';\r\nimport ProductContext, { ProductConsumer } from '../context/productContext'\r\nimport EnquireForm from '../components/enquiryForm';\r\nimport CreateProductForm from '../components/createProductForm';\r\nimport Icon from '@material-ui/core/Icon';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { fcall } from 'q';\r\nimport paginationFactory from 'react-bootstrap-table2-paginator';\r\nvar ProductData;\r\n\r\n// @observer\r\nconst Queries = props => {\r\n    const productState = useContext(ProductContext);\r\n    const [wantsToSeeDetails, setWantsToSeeDetails] = useState({ redirect: false, id: false });\r\n    const [productDetails, setProductDetails] = useState(false);\r\n\r\n\r\n    useEffect(() => {\r\n        requests.call(\"get\", `queries`)\r\n            .then((res) => {\r\n                console.log(res);\r\n                setProductDetails(res.data)\r\n            })\r\n    }, [])\r\n\r\n\r\n    const handleVoting = (details, key) => {\r\n        requests.call(\"post\", `create/product`, { name: details.name, description: details.description, glutonFree: (key == \"up\") ? 1 : 0, user_email: details.user_email })\r\n            .then((res) => {\r\n                console.log(res);\r\n                productState.fetchProducts();\r\n                requests.call(\"delete\", `query/${details._id}`)\r\n                .then((res)=>{\r\n                setProductDetails(res.data)\r\n\r\n                })\r\n\r\n\r\n            })\r\n    }\r\n\r\n\r\n    const loginCalled = () => {\r\n        console.log(\"rendered this\")\r\n        requests.setToken()\r\n        productState.fetchProducts();\r\n    }\r\n    const handleSearchInput = (query) => {\r\n        productState.fetchProducts(query)\r\n    }\r\n    const handleViewDetails = (id) => {\r\n        console.log(\"setting\", id)\r\n        setWantsToSeeDetails({\r\n            ...wantsToSeeDetails,\r\n            redirect: true,\r\n            id: id\r\n        })\r\n    }\r\n    const voteFormatter = (cell, row) => {\r\n        return (\r\n            <div>\r\n                <OverlayTrigger\r\n                    trigger=\"hover\"\r\n                    placement={\"top\"}\r\n                    overlay={\r\n                        <Popover id={`popover-positioned-${\"top\"}`}>\r\n                            <Popover.Title as=\"h3\">{`Popover ${\"top\"}`}</Popover.Title>\r\n                            <Popover.Content>\r\n                                Vote this product as {` `}<strong>Gluten Free</strong>\r\n                            </Popover.Content>\r\n                        </Popover>\r\n                    }\r\n                >\r\n                    <i class=\"material-icons-outlined\" onClick={handleVoting.bind(this, row, \"up\")} >thumb_up</i>\r\n                </OverlayTrigger>\r\n                {` `} {` `}\r\n                <OverlayTrigger\r\n                    trigger=\"hover\"\r\n                    placement={\"top\"}\r\n                    overlay={\r\n                        <Popover id={`popover-positioned-${\"top\"}`}>\r\n                            <Popover.Title as=\"h3\">{`Popover ${\"top\"}`}</Popover.Title>\r\n                            <Popover.Content>\r\n                                Vote this product as {` `}<strong>Contains Gluton</strong>\r\n\r\n                            </Popover.Content>\r\n                        </Popover>\r\n                    }\r\n                >\r\n                    <i class=\"material-icons-outlined\" onClick={handleVoting.bind(this, row, \"down\")}>thumb_down</i>\r\n                </OverlayTrigger>\r\n\r\n\r\n            </div>\r\n        )\r\n    }\r\n    const detailsBTNFormatter = (cell, row) => {\r\n        return (\r\n            <i onClick={handleViewDetails.bind(this, row._id)} class=\"material-icons-outlined\">explore</i>\r\n        )\r\n    }\r\n    const informationFormatterVotes = (cell, row) => {\r\n        return (\r\n            <div>Upvotes\r\n            <OverlayTrigger\r\n                    trigger=\"hover\"\r\n                    placement={\"top\"}\r\n                    overlay={\r\n                        <Popover id={`popover-positioned-${\"top\"}`}>\r\n                            <Popover.Title as=\"h3\">{`Popover ${\"top\"}`}</Popover.Title>\r\n                            <Popover.Content>\r\n                                Votes received on this product as {` `}<strong>Gluten Free</strong>\r\n\r\n                            </Popover.Content>\r\n                        </Popover>\r\n                    }\r\n                >\r\n                    <i class=\"material-icons-outlined md-10\">info</i>\r\n                </OverlayTrigger>\r\n\r\n                {` `} /{` `}\r\n\r\n                Downvotes\r\n            <OverlayTrigger\r\n                    trigger=\"hover\"\r\n                    placement={\"top\"}\r\n                    overlay={\r\n                        <Popover id={`popover-positioned-${\"top\"}`}>\r\n                            <Popover.Title as=\"h3\">{`Popover ${\"top\"}`}</Popover.Title>\r\n                            <Popover.Content>\r\n                                Vote received this product as {` `}<strong>Contains Gluton</strong>\r\n\r\n                            </Popover.Content>\r\n                        </Popover>\r\n                    }\r\n                >\r\n                    <icon class=\"material-icons-outlined md-10\">info</icon>\r\n                </OverlayTrigger>\r\n            </div>\r\n        )\r\n    }\r\n    const votesFormatter = (cell, row) => {\r\n        return (\r\n            <div>\r\n                {row.upvotes} {` / `} {row.downvotes}\r\n            </div>\r\n        )\r\n    }\r\n    const columns = [\r\n        {\r\n            dataField: '_id',\r\n            text: '#'\r\n        },\r\n        {\r\n            dataField: 'name',\r\n            text: 'Product Name'\r\n        },\r\n        {\r\n            dataField: 'description',\r\n            text: 'Description',\r\n        },\r\n        // {\r\n        //     dataField: 'upvotes',\r\n        //     text: 'Upvotes / Downvotes',\r\n        //     headerFormatter: informationFormatterVotes,\r\n        //     formatter: votesFormatter,\r\n\r\n        // },\r\n        {\r\n            dataField: '',\r\n            text: 'Resolve the query',\r\n            formatter: voteFormatter,\r\n\r\n        },\r\n        {\r\n            dataField: 'user_email',\r\n            text: 'Enquirer email',\r\n            // formatter: detailsBTNFormatter,\r\n\r\n        },\r\n    ]\r\n\r\n    let content;\r\n\r\n    console.log(\"[results]\", ProductData)\r\n    if (localStorage.hasOwnProperty(\"userData\")) {\r\n        content = (\r\n            <div className=\"table-container-center\">\r\n\r\n                {/* <div className=\"general-heading\">Look for a product to know what people think about its gluten content !</div> */}\r\n                {!!productDetails && <BootstrapTable bordered={false} keyField='id' data={productDetails} columns={columns} pagination={paginationFactory()} />}\r\n\r\n\r\n\r\n                {/* {results && JSON.stringify(results)} */}\r\n\r\n\r\n                <div style={{ display: \"flex\", justifyContent: \"space-around\" }}>\r\n                    <EnquireForm />\r\n                    <CreateProductForm />\r\n                </div>\r\n\r\n            </div>\r\n            // </ProductConsumer>\r\n\r\n        )\r\n    } else {\r\n        content = (\r\n            <Login loginCalled={loginCalled.bind(this)} />\r\n        )\r\n    }\r\n    return content\r\n}\r\n\r\n\r\nexport default Queries;\r\n","import React, { useContext, useState } from 'react'\r\nimport { Navbar, Nav, NavDropdown, Form, FormControl, Button } from 'react-bootstrap';\r\nimport SearchBox from '../components/smartInputBox'\r\nimport { requests } from '../api/searchAgent';\r\nimport GlobalContext from '../context/productContext';\r\nimport { longStackSupport } from 'q';\r\nimport { Redirect } from 'react-router-dom';\r\nimport EnquireForm from '../components/enquiryForm';\r\nimport CreateProductForm from '../components/createProductForm';\r\n\r\nconst Toolbar = (props) => {\r\n    const productState = useContext(GlobalContext);\r\n\r\n    const [loggedout, setLoggedOut] = useState(false)\r\n    const handleSearchInput = (query) => {\r\n        productState.fetchProducts(query)\r\n\r\n        // fetchProducts(query)\r\n\r\n        // if (!query) {\r\n        //     requests.call(\"get\", `products?glutenFree=${this.state.filtered}`)\r\n        //         .then((res) => {\r\n        //             console.log(\"setting the state with\", res)\r\n        //             this.setState({\r\n        //                 results: res.data\r\n        //             })\r\n\r\n        //         })\r\n        //         .catch(() => {\r\n        //             this.setState({\r\n        //                 results: false\r\n        //             })\r\n        //         })\r\n        // } else requests.call(\"get\", `products?query=${query}&glutenFree=${this.state.filtered}`)\r\n        //     .then((res) => {\r\n        //         console.log(\"setting the state with\", res)\r\n        //         this.setState({\r\n        //             results: res.data\r\n        //         })\r\n\r\n        //     })\r\n        //     .catch(() => {\r\n        //         this.setState({\r\n        //             results: false\r\n        //         })\r\n        //     })\r\n    }\r\n\r\n    const logout = () => {\r\n        window.localStorage.clear();\r\n        setLoggedOut(true)\r\n        // window.location.reload()\r\n\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        // <ProductProvider value={this.state.results || {name : \"test\"} }>\r\n\r\n        <Navbar bg=\"light\" expand=\"lg\">\r\n            {/* <Navbar.Brand href=\"#home\">React-Bootstrap</Navbar.Brand> */}\r\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n            <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                <Nav className=\"mr-auto\">\r\n                    <Nav.Link href=\"/\">Home</Nav.Link>\r\n                    <Nav.Link href=\"/queries\">Queries</Nav.Link>\r\n                    {/* <NavDropdown title=\"Dropdown\" id=\"basic-nav-dropdown\">\r\n                                <NavDropdown.Item href=\"#action/3.1\">Action</NavDropdown.Item>\r\n                                <NavDropdown.Item href=\"#action/3.2\">Another action</NavDropdown.Item>\r\n                                <NavDropdown.Item href=\"#action/3.3\">Something</NavDropdown.Item>\r\n                                <NavDropdown.Divider />\r\n                                <NavDropdown.Item href=\"#action/3.4\">Separated link</NavDropdown.Item>\r\n                            </NavDropdown> */}\r\n                </Nav>\r\n            </Navbar.Collapse>\r\n            <Form inline>\r\n                {/* <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" /> */}\r\n                <SearchBox wait={true}\r\n                    // handleCheckboxChange={this.handleCheckboxChange.bind(this)}\r\n                    callingApiFunction={handleSearchInput.bind(this)}\r\n                // filtered={this.state.filtered} \r\n                />\r\n                <EnquireForm />\r\n                <CreateProductForm />\r\n                <Button  style={{marginTop : \"4px\",marginBottom : \"4px\"}} variant=\"outline-success color\" onClick={logout.bind(this)}>Log Out</Button>\r\n            </Form>\r\n            {loggedout && <Redirect push to=\"/\" />}\r\n        </Navbar>\r\n        // </ProductProvider>\r\n    )\r\n\r\n}\r\n\r\nexport default Toolbar;","import React, { useState, useReducer,useContext } from 'react';\r\nimport GlobalContext from './productContext';\r\nimport { requests } from '../api/searchAgent'\r\n\r\nconst GlobalState = props => {\r\n\r\n    let [results, setResults] = useState(false);\r\n    // let [username, setUn] = useState(false);\r\n\r\n    // let [authState, setRawState] = useState({\r\n    //     auth: false,\r\n    //     username: false,\r\n    // });\r\n    // const setAuthState = (obj) => {\r\n    //     setRawState({ ...authState, ...obj })\r\n    // }\r\n    // const logout = () => {\r\n    //     setAuth(false);\r\n    //     setUn(false);\r\n    // }\r\n    const fetchProducts = (query) => {\r\n\r\n        requests.call(\"get\", query ? `products?query=${query}` : \"products\")\r\n            .then((res) => {\r\n                console.log(\"setting the state with\", res.data)\r\n               setResults(res.data)\r\n            })\r\n            .catch(() => {\r\n                setResults(false)\r\n\r\n            })\r\n\r\n\r\n    }\r\n\r\n    return (\r\n        <GlobalContext.Provider\r\n            value={{\r\n                results, setResults,\r\n                fetchProducts\r\n               \r\n            }}\r\n        >\r\n            {props.children}\r\n        </GlobalContext.Provider>\r\n    );\r\n};\r\n\r\nexport default GlobalState;","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport Home from './pages/home'\r\nimport Chat from './pages/chat'\r\nimport Product from './pages/productDetails'\r\nimport Queries from './pages/queries'\r\nimport Toolbar from './layout/toolbar'\r\nimport GlobalContext from './context/globatState'\r\nimport {\r\n  BrowserRouter as Router,\r\n  Link,\r\n  withRouter,\r\n  Route,\r\n  Switch,\r\n} from 'react-router-dom';\r\nfunction App() {\r\n  return (\r\n    <GlobalContext>\r\n\r\n      <Toolbar />\r\n      <div className=\"app-container\">\r\n\r\n        <Switch>\r\n          {/* < Route path=\"/chat\" component={Chat} /> */}\r\n          < Route path=\"/queries\" component={Queries} />\r\n          < Route path=\"/product/:id\" component={Product} />\r\n          < Route path=\"/\" component={Home} />\r\n        </Switch>\r\n      </div>\r\n    </GlobalContext>\r\n\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n<BrowserRouter>\n<App />\n</BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}